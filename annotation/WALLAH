# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    WALLAH                                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jjourdai <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2017/03/20 17:40:54 by jjourdai          #+#    #+#              #
#    Updated: 2017/03/22 17:40:48 by jjourdai         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

une instruction par ligne

instruction := LABEL(opt): && OPCODE && {param of OPCODE}
LABEL := mix de LABEL_CHARS && termine par LABEL_CHAR
OPCODE := sti | lfork | fork | lld | ld | add | zjump | sub | ldi | or | st | aff | live | xor | lldi | and
param  := REGISTRE | DIRECT | INDIRECT
REGISTRE := rX avec X = REG_NUMBER
DIRECT := DIRECT_CHAR && valeur numerique | LABEL
INDICRECT :=  ****************
un label nest pas forcement suivi dune instruction ou etre place sur la precedent ses instructions.


and := Applique un & bitwise sur les 2 premiers params et stock le resultat dans le 3eme, CARRY;
or := Applique un | bitwise sur les 2 premiers params et stock le resultat dans le 3eme, CARRY;
**ldi := Additionne les 2 premiers params en les traitants comme une adrsse et lit une variable a cette adresse puis la stock dans le 3e params, CARRY;
**lldi := 
xor := Applique un ^ bitwise sur les 2 premiers params et stock le resultat dans le 3eme;
live := prend un parametre un numero de joueur pour checker quil est en vie;
**aff := 
fork := prend un index et creait un nouveau processus qui herite de letat du pere a part son PC, (PC + (1er params % IDX_MOD));
lfork := prend un index et creait un nouveau processus qui herite de letat du pere a part son PC, (PC + (1er params));
sti := prend un registre et 2 index, additionne les 2 derniers, utilise ce resultat comme une adresse ou sera copier la valeur du premier params;
**lld := 
ld := prend 2 params, le premier quelconque et un register, charge la valeur du premier param dans le registre, CARRY;
add := prend 3 registres additionne les 2 premiers, et met le resultat dans le 3eme, CARRY
sub := prend 3 registres soustraits les 2 premiers, et met le resultat dans le 3eme, CARRY
zjmp := prend un index, et fait un saut a cette adresse , si le carry est un;
**st := prend un register et un registre ou un indirect, et stocke la valeur de r1 a ladresse ---

-Ouvrir EXEMPLE.cor
-lire le fichier
-stocker les donnees du champions apres verifier si champion conforme a header_t.prog_size
-creer la map
-repartir/charger les champions
-
